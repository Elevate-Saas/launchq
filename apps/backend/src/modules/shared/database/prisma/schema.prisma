// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  passwordHash String
  role      String   @default("SUPER_ADMIN") // Roles: SUPER_ADMIN, ADMIN, USER

  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  refreshTokenHash String?

  organization Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  profile Profile?
  referrals Referral[] @relation("UserReferrals")
}

model Organization {
  id        String   @id @default(cuid())
  businessName String
  businessEmail String @unique
  businessLogo String?

  members User[]
  waitlists Waitlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Waitlist {
  id        String   @id @default(uuid())
  name      String
  description String?
  emailVerification Boolean @default(false)
  isActive  Boolean  @default(true)

  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  referralSystem ReferralSystem?
  referralSystemId String?

  notifications NotificationSetting?
  signups Signup[]
  referrals Referral[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Signup {
  id        String   @id @default(uuid())
  email     String
  name      String?
  referredBy Referral? @relation(fields: [referredById], references: [id])
  referredById String?

  waitlist  Waitlist @relation(fields: [waitlistId], references: [id])
  waitlistId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Referral {
  id     String   @id @default(uuid())
  referralCode String @unique

  referrer User @relation("UserReferrals", fields: [referrerId], references: [id])
  referrerId String

  waitlist Waitlist @relation(fields: [waitlistId], references: [id])
  waitlistId String

  referredSignups Signup[]
  pointsEarned Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@index([referralCode, referrerId])
}

model ReferralSystem {
  id        String   @id @default(uuid())
  rewardType String? // e.g., "discount", "free_month"
  rewardValue String? // e.g., "10%", "1 month"

  spotBoosts Int @default(0)

  waitlist Waitlist @relation(fields: [waitlistId], references: [id])
  waitlistId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Profile {
  id        String   @id @default(uuid())
  bio       String?
  avatarUrl String?

  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model NotificationSetting {
  id        String   @id @default(uuid())
  emailNotifications Boolean @default(true)
  smsNotifications Boolean @default(false)

  waitlist Waitlist @relation(fields: [waitlistId], references: [id])
  waitlistId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}